import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.stattools import adfuller, kpss
from statsmodels.tsa.arima.model import ARIMA


plt.rcParams.update({'figure.figsize': (9, 7), 'figure.dpi': 120})

# Load the dataset
ipcc = pd.read_csv("/Users/joonkng/Desktop/pandasApp/ipcc.csv", index_col=0)

# Assuming 'Energy' is a row label, extract that row and convert all entries to numeric, coercing errors to NaN
energy_data = pd.to_numeric(ipcc.loc['Energy'], errors='coerce').dropna()

# Original Series Plot
fig, axes = plt.subplots(3, 2, sharex=True)
axes[0, 0].plot(energy_data)
axes[0, 0].set_title('Original Series')
plot_acf(energy_data, ax=axes[0, 1], lags=len(energy_data) - 1)

# 1st Differencing Plot
axes[1, 0].plot(energy_data.diff())
axes[1, 0].set_title('1st Order Differencing')
plot_acf(energy_data.diff().dropna(), ax=axes[1, 1], lags=len(energy_data) - 2)

# 2nd Differencing Plot
axes[2, 0].plot(energy_data.diff().diff())
axes[2, 0].set_title('2nd Order Differencing')
plot_acf(energy_data.diff().diff().dropna(), ax=axes[2, 1], lags=len(energy_data) - 3)

plt.show()

# Perform the Augmented Dickey-Fuller test
result = adfuller(energy_data)
print('ADF Statistic: %f' % result[0])
print('p-value: %f' % result[1])
print('Critical Values:')
for key, value in result[4].items():
    print('\t%s: %.3f' % (key, value))
if result[1] < 0.05:
    print("Reject the null hypothesis (H0), the data does not have a unit root and is stationary")
else:
    print("Fail to reject the null hypothesis (H0), the data has a unit root and is non-stationary")

plt.figure(figsize=(9, 3), dpi=120)

#PACF plot
fig, axes = plt.subplots(1, 2, sharex=True)
axes[0].plot(energy_data.diff()); axes[0].set_title('1st Differencing')
axes[1].set(ylim=(0,5))
plot_pacf(energy_data.diff().dropna(), ax=axes[1])
plt.tight_layout()
plt.show()

# ACF plot for 1st Order Differencing
fig, axes = plt.subplots(1, 2, sharex=True)
axes[0].plot(energy_data.diff()); axes[0].set_title('1st Differencing')
axes[1].set(ylim=(0,1.2))
plot_acf(energy_data.diff().dropna(), ax=axes[1])
plt.show()

#Model fit
model = ARIMA(energy_data, order=(1, 1, 2))
model_fit = model.fit()
print(model_fit.summary())

#Residuals
residuals = pd.DataFrame(model_fit.resid)
fig, ax = plt.subplots(1,2)
residuals.plot(title="Residuals", ax=ax[0])
residuals.plot(kind='kde', title='Density', ax=ax[1])
plt.show()

#ARIMA forecast
if not isinstance(energy_data.index, pd.PeriodIndex):
    energy_data.index = pd.period_range(start='1990', end='2021', freq='A')
energy_data.index = energy_data.index.to_timestamp()
model = ARIMA(energy_data, order=(1, 1, 2))
model_fit = model.fit()
pred_start_year = '1990'
pred_end_year = '2021'
pred = model_fit.get_prediction(start=pd.to_datetime(pred_start_year), end=pd.to_datetime(pred_end_year), dynamic=False)
pred_conf = pred.conf_int()
plt.figure(figsize=(12, 5))
ax = energy_data.plot(label='Observed', color='blue')
pred.predicted_mean.plot(ax=ax, label='Forecast', alpha=0.7, color='orange')
ax.set_xlabel('Year')
ax.set_ylabel('Energy Data')
plt.legend()

plt.show()
